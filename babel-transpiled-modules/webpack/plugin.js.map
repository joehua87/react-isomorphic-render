{"version":3,"sources":["../../source/webpack/plugin.js"],"names":[],"mappings":"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","file":"plugin.js","sourcesContent":["import path from 'path'\nimport fs   from 'fs'\n\nfunction Plugin()\n{\n\tthis.stats_to_json_options = \n\t{\n\t\t// Add built modules information to chunk information.\n\t\t// What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\n\t\tchunkModules: true,\n\n\t\t// The following modules will be excluded from Webpack stats Json file.\n\t\t// What for is it here? I don't know. It's a copy & paste from the Webpack author's code.\n\t\texclude:\n\t\t[\n\t\t\t/node_modules[\\\\\\/]react(-router)?[\\\\\\/]/,\n\t\t\t/node_modules[\\\\\\/]items-store[\\\\\\/]/\n\t\t]\n\t}\n}\n\nPlugin.prototype.apply = function(compiler)\n{\n\tconst output_path = path.resolve(compiler.options.output.path, 'webpack-assets.json')\n\n\tcompiler.plugin('emit', function(compilation, done)\n\t{\n\t\t// notify stats\n\t\tnotify_stats(compilation.getStats())\n\n\t\t// write stats\n\t\t// compilation.assets[output_path] =\n\t\t// {\n\t\t// \tsize()\n\t\t// \t{\n\t\t// \t\treturn 0\n\t\t// \t},\n\t\t// \tsource()\n\t\t// \t{\n\t\t// \t\treturn JSON.stringify(assets(compilation.getStats().toJson(this.stats_to_json_options), compiler.options.output.publicPath))\n\t\t// \t}\n\t\t// }\n\n\t\tfs.writeFileSync(output_path, JSON.stringify(assets(compilation.getStats().toJson(this.stats_to_json_options), compiler.options.output.publicPath)))\n\n\t\t// fs.outputFileSync(path.resolve(this.options.output.path, 'webpack-stats.json'), JSON.stringify(stats.toJson(options)))\n\n\t\tdone()\n\t})\n}\n\nfunction assets(json, public_path)\n{\n\tconst assets_by_chunk = json.assetsByChunkName\n\n\tconst assets =\n\t{\n\t\tjavascript: {},\n\t\tstyles: {}\n\t}\n\n\t// gets asset paths by name and extension of their chunk\n\tfunction get_assets(name, extension)\n\t{\n\t\tlet chunk = json.assetsByChunkName[name]\n\t\n\t\t// a chunk could be a string or an array, so make sure it is an array\n\t\tif (!(Array.isArray(chunk)))\n\t\t{\n\t\t\tchunk = [chunk]\n\t\t}\n\t\n\t\treturn chunk\n\t\t\t// filter by extension\n\t\t\t.filter(name => path.extname(name) === `.${extension}`)\n\t\t\t// adjust the real path (can be http, filesystem)\n\t\t\t.map(name => public_path + name)\n\t}\n\n\t// for each chunk name (\"main\", \"common\", ...)\n\tObject.keys(assets_by_chunk).forEach(function(name)\n\t{\n\t\t// log.debug(`getting javascript and styles for chunk \"${name}\"`)\n\n\t\t// get javascript chunk real file path\n\n\t\tconst javascript = get_assets(name, 'js')[0]\n\t\t// the second asset is usually a source map\n\n\t\tif (javascript)\n\t\t{\n\t\t\t// log.debug(` (got javascript)`)\n\t\t\tassets.javascript[name] = javascript\n\t\t}\n\n\t\t// get style chunk real file path\n\n\t\tconst style = get_assets(name, 'css')[0]\n\t\t// the second asset is usually a source map\n\n\t\tif (style)\n\t\t{\n\t\t\t// log.debug(` (got style)`)\n\t\t\tassets.styles[name] = style\n\t\t}\n\t})\n\n\treturn assets\n}\n\n// outputs webpack stats to console if there are no errors or warnings\n\nfunction error(error)\n{\n\t// BELLs when something goes wrong!\n\tconsole.log(\"\\x07\" + error)\n}\n\nfunction warning(warning)\n{\n\tconsole.log(warning)\n}\n\nfunction notify_stats(stats)\n{\n\tconst json = stats.toJson()\n\t\n\t// if there were any errors\n\tif (json.errors.length > 0)\n\t{\n\t\treturn json.errors.forEach(error)\n\t}\n\n\t// if there were any warnings\n\tif (json.warnings.length > 0)\n\t{\n\t\tjson.warnings.forEach(warning)\n\t}\n\n\t// if it's ok\n\tconsole.log(stats.toString\n\t({\n\t\tchunks: false,\n\t\tcolors: true\n\t}))\n}\n\nmodule.exports = Plugin"]}