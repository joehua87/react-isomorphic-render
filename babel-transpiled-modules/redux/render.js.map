{"version":3,"sources":["../../source/redux/render.js"],"names":[],"mappings":"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","file":"render.js","sourcesContent":["import { client as default_client_render, server as default_server_render } from '../render'\n\nimport { match } from 'redux-router/server'\nimport { ReduxRouter } from 'redux-router'\n\nimport React          from 'react'\nimport ReactDOMServer from 'react-dom/server'\n\n// returns a Promise for React component.\n//\n// renders directly to the \"to\" DOM element.\n// (to allow for faster DOM mutations instead of simple slow Html code replacement)\nexport function client({ development, render, create_routes, store, to })\n{\n\tlet router_element = <ReduxRouter routes={create_routes({store})} />\n\n\treturn render(router_element, {store}).then(element =>\n\t{\n\t\treturn default_client_render\n\t\t({\n\t\t\tdevelopment, \n\t\t\telement,\n\t\t\tto\n\t\t})\n\t})\n}\n\n// returns a Promise resolving to Html code.\nexport function server({ disable_server_side_rendering, render, render_html, url, store })\n{\n\tif (disable_server_side_rendering)\n\t{\n\t\treturn Promise.resolve({ markup: default_server_render({ html }) })\n\t}\n\n\treturn new Promise((resolve, reject) =>\n\t{\n\t\tstore.dispatch(match(url, (error, redirect_location, router_state) =>\n\t\t{\n\t\t\tif (redirect_location)\n\t\t\t{\n\t\t\t\treturn resolve\n\t\t\t\t({\n\t\t\t\t\tredirect: redirect_location.pathname + redirect_location.search\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tif (error)\n\t\t\t{\n\t\t\t\treturn reject(error)\n\t\t\t}\n\n\t\t\tif (!router_state)\n\t\t\t{\n\t\t\t\treturn reject(new Error('No router state'))\n\t\t\t}\n\n\t\t\t// Workaround redux-router query string issue:\n\t\t\t// https://github.com/rackt/redux-router/issues/106\n\t\t\tif (router_state.location.search && !router_state.location.query)\n\t\t\t{\n\t\t\t\trouter_state.location.query = query_string.parse(router_state.location.search)\n\t\t\t}\n\n\t\t\tconst get_status_from_routes = matched_routes =>\n\t\t\t{\n\t\t\t\treturn matched_routes.reduce((previous, current) => (current && current.status) || (previous && current.status))\n\t\t\t}\n\n\t\t\tstore.getState().router.then(() => \n\t\t\t{\n\t\t\t\tconst child_element = <ReduxRouter/>\n\n\t\t\t\tconst status = get_status_from_routes(router_state.routes)\n\n\t\t\t\tresolve({ status, markup: '<!doctype html>\\n' +\n\t\t\t\t\tReactDOMServer.renderToString(render_html(render(child_element, {store}))) })\n\t\t\t})\n\t\t\t.catch(error =>\n\t\t\t{\n\t\t\t\t// log.error(error)\n\t\t\t\terror.markup = default_server_render({ render_html }) // let client render error page or re-request data\n\t\t\t\tthrow error\n\t\t\t})\n\t\t}))\n\t})\n}"]}