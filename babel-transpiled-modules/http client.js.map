{"version":3,"sources":["../source/http client.js"],"names":[],"mappings":"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","file":"http client.js","sourcesContent":["import superagent from 'superagent'\n\nexport default class http_client\n{\n\t// Constructs a new instance of Api Client.\n\t// Optionally takes an Http Request as a reference to mimic (for example, cookies).\n\t// This feature is used for Api calls during server side rendering \n\t// (this way server side Http Api calls mimic client side Http Api calls).\n\tconstructor({ host, port, prefix, clone_request })\n\t{\n\t\tif (typeof clone_request === 'string')\n\t\t{\n\t\t\tprefix = clone_request\n\t\t\tclone_request = undefined\n\t\t}\n\n\t\tif (clone_request)\n\t\t{\n\t\t\tthis.server = true\n\t\t}\n\t\t\n\t\tthis.host = host\n\t\tthis.port = port || 80\n\t\tthis.prefix = prefix || ''\n\n\t\tconst http = {}\n\n\t\tconst http_methods =\n\t\t{\n\t\t\tget    : 'get',\n\t\t\tpost   : 'post',\n\t\t\tcall   : 'post',\n\t\t\tcreate : 'post',\n\t\t\tput    : 'put',\n\t\t\tupdate : 'put',\n\t\t\tpatch  : 'patch',\n\t\t\tdelete : 'del'\n\t\t}\n\n\t\tfor (let method of Object.keys(http_methods))\n\t\t{\n\t\t\tthis[method] = (path, data, options) =>\n\t\t\t{\n\t\t\t\t// options = options || {}\n\n\t\t\t\tconst http_method = http_methods[method]\n\n\t\t\t\tif (!http_method)\n\t\t\t\t{\n\t\t\t\t\tthrow new Error(`Api method not found: ${method}`)\n\t\t\t\t}\n\n\t\t\t\tconst url = this.format_url(path)\n\n\t\t\t\treturn new Promise((resolve, reject) =>\n\t\t\t\t{\n\t\t\t\t\tconst request = superagent[http_method](url)\n\n\t\t\t\t\tif (data)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (http_method === 'post')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trequest.send(data)\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trequest.query(data)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// server side only\n\t\t\t\t\t// (copies user authentication cookies to retain session specific data)\n\t\t\t\t\tif (clone_request)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (clone_request.get('cookie'))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trequest.set('cookie', clone_request.get('cookie'))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (options && options.locale)\n\t\t\t\t\t{\n\t\t\t\t\t\trequest.set('accept-language', locale)\n\t\t\t\t\t}\n\n\t\t\t\t\trequest.end((error, response) => \n\t\t\t\t\t{\n\t\t\t\t\t\tif (error)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// superagent would have already output the error to console\n\t\t\t\t\t\t\t// console.error(error.stack)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn reject(error) // (response && response.body) || \n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(response.body)\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tformat_url(path)\n\t{\n\t\t// add slash in the beginning\n\t\tlet normalized_path = path[0] !== '/' ? '/' + path : path\n\n\t\tif (this.server)\n\t\t{\n\t\t\t// Prepend host and port of the API server to the path.\n\t\t\treturn `http://${this.host}:${this.port}${this.prefix}${normalized_path}`\n\t\t}\n\n\t\t// Prepend prefix to relative URL, to proxy to API server.\n\t\treturn this.prefix + normalized_path\n\t}\n}"]}